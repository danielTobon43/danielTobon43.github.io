
ProyectoFinalMicro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800200  00800200  00000364  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000024b  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000143  00000000  00000000  00000667  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000333  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00000ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000024b  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  00000daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	78 c0       	rjmp	.+240    	; 0xf2 <__ctors_end>
   2:	00 00       	nop
   4:	88 c0       	rjmp	.+272    	; 0x116 <__bad_interrupt>
   6:	00 00       	nop
   8:	86 c0       	rjmp	.+268    	; 0x116 <__bad_interrupt>
   a:	00 00       	nop
   c:	84 c0       	rjmp	.+264    	; 0x116 <__bad_interrupt>
   e:	00 00       	nop
  10:	82 c0       	rjmp	.+260    	; 0x116 <__bad_interrupt>
  12:	00 00       	nop
  14:	80 c0       	rjmp	.+256    	; 0x116 <__bad_interrupt>
  16:	00 00       	nop
  18:	7e c0       	rjmp	.+252    	; 0x116 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7c c0       	rjmp	.+248    	; 0x116 <__bad_interrupt>
  1e:	00 00       	nop
  20:	7a c0       	rjmp	.+244    	; 0x116 <__bad_interrupt>
  22:	00 00       	nop
  24:	78 c0       	rjmp	.+240    	; 0x116 <__bad_interrupt>
  26:	00 00       	nop
  28:	76 c0       	rjmp	.+236    	; 0x116 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	74 c0       	rjmp	.+232    	; 0x116 <__bad_interrupt>
  2e:	00 00       	nop
  30:	72 c0       	rjmp	.+228    	; 0x116 <__bad_interrupt>
  32:	00 00       	nop
  34:	70 c0       	rjmp	.+224    	; 0x116 <__bad_interrupt>
  36:	00 00       	nop
  38:	6e c0       	rjmp	.+220    	; 0x116 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6c c0       	rjmp	.+216    	; 0x116 <__bad_interrupt>
  3e:	00 00       	nop
  40:	6a c0       	rjmp	.+212    	; 0x116 <__bad_interrupt>
  42:	00 00       	nop
  44:	68 c0       	rjmp	.+208    	; 0x116 <__bad_interrupt>
  46:	00 00       	nop
  48:	66 c0       	rjmp	.+204    	; 0x116 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	64 c0       	rjmp	.+200    	; 0x116 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8b c0       	rjmp	.+278    	; 0x168 <__vector_20>
  52:	00 00       	nop
  54:	60 c0       	rjmp	.+192    	; 0x116 <__bad_interrupt>
  56:	00 00       	nop
  58:	5e c0       	rjmp	.+188    	; 0x116 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5c c0       	rjmp	.+184    	; 0x116 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c0       	rjmp	.+180    	; 0x116 <__bad_interrupt>
  62:	00 00       	nop
  64:	58 c0       	rjmp	.+176    	; 0x116 <__bad_interrupt>
  66:	00 00       	nop
  68:	56 c0       	rjmp	.+172    	; 0x116 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	54 c0       	rjmp	.+168    	; 0x116 <__bad_interrupt>
  6e:	00 00       	nop
  70:	52 c0       	rjmp	.+164    	; 0x116 <__bad_interrupt>
  72:	00 00       	nop
  74:	50 c0       	rjmp	.+160    	; 0x116 <__bad_interrupt>
  76:	00 00       	nop
  78:	4e c0       	rjmp	.+156    	; 0x116 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4c c0       	rjmp	.+152    	; 0x116 <__bad_interrupt>
  7e:	00 00       	nop
  80:	4a c0       	rjmp	.+148    	; 0x116 <__bad_interrupt>
  82:	00 00       	nop
  84:	48 c0       	rjmp	.+144    	; 0x116 <__bad_interrupt>
  86:	00 00       	nop
  88:	46 c0       	rjmp	.+140    	; 0x116 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	44 c0       	rjmp	.+136    	; 0x116 <__bad_interrupt>
  8e:	00 00       	nop
  90:	42 c0       	rjmp	.+132    	; 0x116 <__bad_interrupt>
  92:	00 00       	nop
  94:	40 c0       	rjmp	.+128    	; 0x116 <__bad_interrupt>
  96:	00 00       	nop
  98:	3e c0       	rjmp	.+124    	; 0x116 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3c c0       	rjmp	.+120    	; 0x116 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	3a c0       	rjmp	.+116    	; 0x116 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	38 c0       	rjmp	.+112    	; 0x116 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	36 c0       	rjmp	.+108    	; 0x116 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	34 c0       	rjmp	.+104    	; 0x116 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	32 c0       	rjmp	.+100    	; 0x116 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	30 c0       	rjmp	.+96     	; 0x116 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2e c0       	rjmp	.+92     	; 0x116 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2c c0       	rjmp	.+88     	; 0x116 <__bad_interrupt>
  be:	00 00       	nop
  c0:	2a c0       	rjmp	.+84     	; 0x116 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	28 c0       	rjmp	.+80     	; 0x116 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	26 c0       	rjmp	.+76     	; 0x116 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	24 c0       	rjmp	.+72     	; 0x116 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	22 c0       	rjmp	.+68     	; 0x116 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	20 c0       	rjmp	.+64     	; 0x116 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1e c0       	rjmp	.+60     	; 0x116 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1c c0       	rjmp	.+56     	; 0x116 <__bad_interrupt>
  de:	00 00       	nop
  e0:	1a c0       	rjmp	.+52     	; 0x116 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	0e 01       	movw	r0, r28
  e6:	15 01       	movw	r2, r10
  e8:	1c 01       	movw	r2, r24
  ea:	22 01       	movw	r4, r4
  ec:	35 01       	movw	r6, r10
  ee:	3f 01       	movw	r6, r30
  f0:	52 01       	movw	r10, r4

000000f2 <__ctors_end>:
  f2:	11 24       	eor	r1, r1
  f4:	1f be       	out	0x3f, r1	; 63
  f6:	cf ef       	ldi	r28, 0xFF	; 255
  f8:	d1 e2       	ldi	r29, 0x21	; 33
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0c bf       	out	0x3c, r16	; 60

00000102 <__do_clear_bss>:
 102:	22 e0       	ldi	r18, 0x02	; 2
 104:	a0 e0       	ldi	r26, 0x00	; 0
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a5 30       	cpi	r26, 0x05	; 5
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	d5 d0       	rcall	.+426    	; 0x2be <main>
 114:	eb c0       	rjmp	.+470    	; 0x2ec <_exit>

00000116 <__bad_interrupt>:
 116:	74 cf       	rjmp	.-280    	; 0x0 <__vectors>

00000118 <_Z7confADCv>:
	void confADC(){
		//===================================================
		//CONFIGURACIÓN DEL ADC
		//===================================================
    
		ADMUX |= (1<<REFS0)|(1<<ADLAR); //REFERENCIA AVCC=5V,JUSTIFICACIÓN DEL DATO A LA IZQUIERDA
 118:	ec e7       	ldi	r30, 0x7C	; 124
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 66       	ori	r24, 0x60	; 96
 120:	80 83       	st	Z, r24
		ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //HABILITACIÓN DEL ADC,PRESCALER DE 128
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	87 68       	ori	r24, 0x87	; 135
 12a:	80 83       	st	Z, r24
		ADCSRB |= 0x00; //SELECCIÓN DEL ADC (ADC0)
 12c:	eb e7       	ldi	r30, 0x7B	; 123
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <_Z9confTIMERv>:
	void confTIMER(){
		//===================================================
		//CONFIGURACIÓN DEL TIMER 1
		//===================================================
    	
		TCCR1B |= (1<<CS12)|(1<<CS10); //PRESCALER DE 1024
 136:	e1 e8       	ldi	r30, 0x81	; 129
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	85 60       	ori	r24, 0x05	; 5
 13e:	80 83       	st	Z, r24
		TIMSK1 |= (1<<TOIE1); //HABILITACIÓN DE LA INTERRUPCIÓN POR OVERFLOW
 140:	ef e6       	ldi	r30, 0x6F	; 111
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	81 60       	ori	r24, 0x01	; 1
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <_Z9confUSArtv>:
void confUSArt();
	void confUSArt(){
		//===================================================
		//CONFIGURACIÓN USART
		//===================================================
		 UCSR0B |= (1<<TXEN0);	//MODO RECEPCIÓN E INT_POR RECEPCIÓN,BOTON DE PARADA DE EMERGENCIA
 14c:	e1 ec       	ldi	r30, 0xC1	; 193
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 83       	st	Z, r24
		 UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);//MODO ASINCRONO, 8 BITS, 1 BIT DE PARADA, NO BITS DE PARIDAD
 156:	e2 ec       	ldi	r30, 0xC2	; 194
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	80 83       	st	Z, r24
		 UBRR0L = 103;					//103 ->>VELOCIDAD DE 9600 BAUDIOS (BITS POR SEGUNDO)
 160:	87 e6       	ldi	r24, 0x67	; 103
 162:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 166:	08 95       	ret

00000168 <__vector_20>:
		 proceso();
	 }
	 
	 }//Fin MAIN
	
ISR(TIMER1_OVF_vect){
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
	TCNT1L=0xF4;
 174:	84 ef       	ldi	r24, 0xF4	; 244
 176:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
	TCNT1H=0xFF;
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
}	
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_Z7procesov>:

void proceso(){
	
	asm("FinCONV:");
	asm("LDS R16,0x7A");	//DIRECCIÓN DEL REGISTRO ADCSRA
 18c:	00 91 7a 00 	lds	r16, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	asm("SBRS R16,4");		//SKIP NEXT INSTRUCTION IF BIT 4 IS SET IN R16
 190:	04 ff       	sbrs	r16, 4
	asm("JMP FinCONV");
 192:	fc cf       	rjmp	.-8      	; 0x18c <_Z7procesov>
	
	temp=ADCH+0x22;	
 194:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
 198:	8e 5d       	subi	r24, 0xDE	; 222
 19a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	UDR0 = temp;
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>

000001a2 <TRANSEND>:
	asm("TRANSEND:");
	asm("LDS R16,0xC0");//CARGA LA DIRECCIÓN DEL REGISTRO UCSR0A
 1a2:	00 91 c0 00 	lds	r16, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	asm("SBRS R16,6");	//SKIP NEXT INTRUCTION IF BIT 7 IS SET IN R16 (BIT DE BANDERA DATO RECIBIDO)
 1a6:	06 ff       	sbrs	r16, 6
	asm("JMP TRANSEND");
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <TRANSEND>
	UCSR0A=(1<<UDRE0);
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	
	contador++;	
 1b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <contador>
 1b4:	e1 e0       	ldi	r30, 0x01	; 1
 1b6:	e8 0f       	add	r30, r24
 1b8:	e0 93 04 02 	sts	0x0204, r30	; 0x800204 <contador>
	estado=PINA;
 1bc:	80 b1       	in	r24, 0x00	; 0
 1be:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <estado>
	if(estado==0B11001010){
 1c2:	8a 3c       	cpi	r24, 0xCA	; 202
 1c4:	d9 f0       	breq	.+54     	; 0x1fc <TRANSEND+0x5a>
		estado=0B11001010;
	}else if (estadoFinal2==0B10000000)
 1c6:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <estadoFinal2>
 1ca:	90 38       	cpi	r25, 0x80	; 128
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <TRANSEND+0x34>
	{
		estado=0B11110101;
 1ce:	85 ef       	ldi	r24, 0xF5	; 245
 1d0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <estado>
 1d4:	13 c0       	rjmp	.+38     	; 0x1fc <TRANSEND+0x5a>
	}
	else if(estado==0B11101010)
 1d6:	8a 3e       	cpi	r24, 0xEA	; 234
 1d8:	89 f0       	breq	.+34     	; 0x1fc <TRANSEND+0x5a>
	{
		estado=0B11101010;
	}else if(estadoFinal==(0B10000000)){
 1da:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <estadoFinal>
 1de:	80 38       	cpi	r24, 0x80	; 128
 1e0:	21 f4       	brne	.+8      	; 0x1ea <TRANSEND+0x48>
		estado=(0B11110101);		
 1e2:	85 ef       	ldi	r24, 0xF5	; 245
 1e4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <estado>
 1e8:	09 c0       	rjmp	.+18     	; 0x1fc <TRANSEND+0x5a>
	}else if(estadoFinal==0B11000000){
 1ea:	80 3c       	cpi	r24, 0xC0	; 192
 1ec:	21 f4       	brne	.+8      	; 0x1f6 <TRANSEND+0x54>
		estado=(0B11100000);
 1ee:	80 ee       	ldi	r24, 0xE0	; 224
 1f0:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <estado>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <TRANSEND+0x5a>
	}else{
		estado=PINA;
 1f6:	80 b1       	in	r24, 0x00	; 0
 1f8:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <estado>
	}
	
	if(contador<8){
 1fc:	e8 30       	cpi	r30, 0x08	; 8
 1fe:	08 f0       	brcs	.+2      	; 0x202 <TRANSEND+0x60>
 200:	58 c0       	rjmp	.+176    	; 0x2b2 <TRANSEND+0x110>
			switch(contador)
 202:	8e 2f       	mov	r24, r30
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	31 97       	sbiw	r30, 0x01	; 1
 20a:	e7 30       	cpi	r30, 0x07	; 7
 20c:	f1 05       	cpc	r31, r1
 20e:	08 f0       	brcs	.+2      	; 0x212 <TRANSEND+0x70>
 210:	52 c0       	rjmp	.+164    	; 0x2b6 <TRANSEND+0x114>
 212:	88 27       	eor	r24, r24
 214:	ee 58       	subi	r30, 0x8E	; 142
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	8f 4f       	sbci	r24, 0xFF	; 255
 21a:	60 c0       	rjmp	.+192    	; 0x2dc <__tablejump2__>
			{					
				//======================================================================
				//CASO 1
				//======================================================================
							case 1:							
							if (estado==0B11111110)
 21c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 220:	8e 3f       	cpi	r24, 0xFE	; 254
 222:	09 f0       	breq	.+2      	; 0x226 <TRANSEND+0x84>
 224:	48 c0       	rjmp	.+144    	; 0x2b6 <TRANSEND+0x114>
							{
								PORTB=(0B00000001);		
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	85 b9       	out	0x05, r24	; 5
							}						
				//======================================================================
				//CASO 2
				//======================================================================		
							case 2:
								if (estado==0B11111100)
 22a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 22e:	8c 3f       	cpi	r24, 0xFC	; 252
 230:	09 f0       	breq	.+2      	; 0x234 <TRANSEND+0x92>
 232:	41 c0       	rjmp	.+130    	; 0x2b6 <TRANSEND+0x114>
								{
									PORTB=(0B00000011);																			
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	85 b9       	out	0x05, r24	; 5
							}							
				//======================================================================
				//CASO 3
				//======================================================================							
							case 3:
							if (estado==0B11111000)
 238:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 23c:	88 3f       	cpi	r24, 0xF8	; 248
 23e:	d9 f5       	brne	.+118    	; 0x2b6 <TRANSEND+0x114>
							{											
								PORTB=(0B00000111);																													
 240:	87 e0       	ldi	r24, 0x07	; 7
 242:	85 b9       	out	0x05, r24	; 5
							}
				//======================================================================
				//CASO 4
				//======================================================================												
						case 4:						
						if(estado==0B11110010){							
 244:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 248:	82 3f       	cpi	r24, 0xF2	; 242
 24a:	a9 f5       	brne	.+106    	; 0x2b6 <TRANSEND+0x114>
							PORTB=0B00001001;
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	87 ea       	ldi	r24, 0xA7	; 167
 254:	91 e6       	ldi	r25, 0x61	; 97
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <TRANSEND+0xb4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <TRANSEND+0xbe>
 260:	00 00       	nop
							_delay_ms(2000);
							estadoFinal=(0B10000000);
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <estadoFinal>
							
						}else{
							break;
						}
						break;
 268:	26 c0       	rjmp	.+76     	; 0x2b6 <TRANSEND+0x114>
				//======================================================================
				//CASO 5
				//======================================================================		
						case 5:
						if(estado==(0B11110101)){
 26a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 26e:	85 3f       	cpi	r24, 0xF5	; 245
 270:	11 f5       	brne	.+68     	; 0x2b6 <TRANSEND+0x114>
							PORTB=0B00000101;							
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	85 b9       	out	0x05, r24	; 5
							estadoFinal=(0B10000000);							
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <estadoFinal>
						}else{
							break;
						}
						break;
 27c:	1c c0       	rjmp	.+56     	; 0x2b6 <TRANSEND+0x114>
				//======================================================================
				//CASO 6
				//======================================================================		
						case 6:
						if(estado==0B11101010){
 27e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 282:	8a 3e       	cpi	r24, 0xEA	; 234
 284:	c1 f4       	brne	.+48     	; 0x2b6 <TRANSEND+0x114>
							PORTB=0B00010001;
 286:	81 e1       	ldi	r24, 0x11	; 17
 288:	85 b9       	out	0x05, r24	; 5
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	83 ed       	ldi	r24, 0xD3	; 211
 28e:	90 e3       	ldi	r25, 0x30	; 48
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <TRANSEND+0xee>
 298:	00 c0       	rjmp	.+0      	; 0x29a <TRANSEND+0xf8>
 29a:	00 00       	nop
							_delay_ms(1000);
							estadoFinal2=(0B10000000);
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <estadoFinal2>
							
							
						}else{
							break;
						}
						break;
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <TRANSEND+0x114>
				//======================================================================
				//CASO 7
				//======================================================================											
						case 7:
						if(estado==0B11001010){
 2a4:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <estado>
 2a8:	8a 3c       	cpi	r24, 0xCA	; 202
 2aa:	29 f4       	brne	.+10     	; 0x2b6 <TRANSEND+0x114>
							PORTB=0B00100000;
 2ac:	80 e2       	ldi	r24, 0x20	; 32
 2ae:	85 b9       	out	0x05, r24	; 5
						}else{
							break;
						}
						break;
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <TRANSEND+0x114>
					
		}//Fin switch case
		}else{
			contador=0;
 2b2:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <contador>
		}//Fin contador
		ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADSC); //INICIO DE CONVERSIÓN
 2b6:	87 ec       	ldi	r24, 0xC7	; 199
 2b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 2bc:	08 95       	ret

000002be <main>:
int main(void)
{
    //===================================================
    //INICIO PROGRAMA
    //===================================================
    cli();
 2be:	f8 94       	cli
	DDRB = 0xFF; //DEFINE CÓMO SALIDA EL PUERTO B,PUERTOS QUE ENVIARA LAS SEÑALES DE ACTIVACION DEL MOTOR Y LA ELECTROVALVULA
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	84 b9       	out	0x04, r24	; 4
	DDRF = 0x00; //DEFINE CÓMO ENTRADA EL PUERTO F (PUERTO DEL ADC), ENTRARA LA SEÑAL ENVIADA POR EL LM35
 2c4:	10 ba       	out	0x10, r1	; 16
	DDRA = 0x00;
 2c6:	11 b8       	out	0x01, r1	; 1
	PORTA = 0xFF;
 2c8:	82 b9       	out	0x02, r24	; 2
	//===================================================
	//CONFIGURACIÓN DEL ADC
	//===================================================
	confADC();
 2ca:	26 df       	rcall	.-436    	; 0x118 <_Z7confADCv>
	//===================================================
	//CONFIGURACIÓN TIMER 1
	//===================================================
	confTIMER();
 2cc:	34 df       	rcall	.-408    	; 0x136 <_Z9confTIMERv>
	//===================================================
	//CONFIGURACIÓN USART
	//===================================================
	confUSArt();	 
 2ce:	3e df       	rcall	.-388    	; 0x14c <_Z9confUSArtv>
    sei(); 
 2d0:	78 94       	sei
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADSC); //INICIO DE CONVERSIÓN
 2d2:	87 ec       	ldi	r24, 0xC7	; 199
 2d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	 
	 while(1){
		 proceso();
 2d8:	59 df       	rcall	.-334    	; 0x18c <_Z7procesov>
unsigned char estadoFinal2=0;
unsigned char temp;
#include <util/delay.h>


int main(void)
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <main+0x1a>

000002dc <__tablejump2__>:
 2dc:	ee 0f       	add	r30, r30
 2de:	ff 1f       	adc	r31, r31
 2e0:	88 1f       	adc	r24, r24
 2e2:	8b bf       	out	0x3b, r24	; 59
 2e4:	07 90       	elpm	r0, Z+
 2e6:	f6 91       	elpm	r31, Z
 2e8:	e0 2d       	mov	r30, r0
 2ea:	19 94       	eijmp

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
